"use strict";
var language_manager_1 = require("./language-manager");
language_manager_1.LanguageManager.registerLanguage("ru", {
    argumentNull: "Значение не может быть неопределенным. Имя параметра: {parameterName}.",
    creditCard: "Поле {name} не содержит допустимый номер кредитной карты.",
    email: "Поле {name} не содержит допустимый адрес электронной почты.",
    empty: "Поле {name} должно быть пустым.",
    equal: "Поле {name} должно содержать значение '{comparisonValue}'.",
    exactLength: "Поле {name} должно содержать строку длиною {exactLength}.",
    exclusiveBetween: "Значение поля {name} должно быть в пределах от {min} до {max}.",
    greaterThan: "Значение поля {name} должно быть больше {min}.",
    greaterThanOrEqual: "Значение поля {name} должно быть больше либо равно {min}.",
    inclusiveBetween: "Значение поля {name} должно быть в пределах от {min} до {max} включительно.",
    invalidField: "Поле {name} содержит недопустимое значение.",
    invalidFieldType: "Тип данных поля {name} должен быть '{expectedType}'. Обнаружено значение: '{type}'.",
    lessThan: "Значение поля {name} должно быть меньше {max}.",
    lessThanOrEquals: "Значение поля {name} должно быть меньше либо равно {max}.",
    maxLength: "Поле {name} должно содержать строку с максимальной длиной {maxLength}.",
    minLength: "Поле {name} должно содержать строку с минимальной длиной {minLength}.",
    notEmpty: "Требуется поле {name}.",
    notEqual: "Поле {name} не должно содержать значение '{comparisonValue}'.",
    notNull: "Требуется поле {name}.",
    null: "Поле {name} должно быть пустым.",
    phone: "Поле {name} не содержит допустимый номер телефона.",
    predicate: "Поле {name} содержит недопустимое значение.",
    regularExpression: "Поле {name} должно соответствовать регулярному выражению '{regularExpression}'.",
    uri: "Поле {name} не содержит допустимый полный URL-адрес http, https или ftp."
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9sb2NhbGl6YXRpb24vcnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUFnQyxvQkFBb0IsQ0FBQyxDQUFBO0FBRXJELGtDQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0lBQ25DLFlBQVksRUFBUSx3RUFBd0U7SUFDNUYsVUFBVSxFQUFVLDJEQUEyRDtJQUMvRSxLQUFLLEVBQWUsNkRBQTZEO0lBQ2pGLEtBQUssRUFBZSxpQ0FBaUM7SUFDckQsS0FBSyxFQUFlLDREQUE0RDtJQUNoRixXQUFXLEVBQVMsMkRBQTJEO0lBQy9FLGdCQUFnQixFQUFJLGdFQUFnRTtJQUNwRixXQUFXLEVBQVMsZ0RBQWdEO0lBQ3BFLGtCQUFrQixFQUFFLDJEQUEyRDtJQUMvRSxnQkFBZ0IsRUFBSSw2RUFBNkU7SUFDakcsWUFBWSxFQUFRLDZDQUE2QztJQUNqRSxnQkFBZ0IsRUFBSSxxRkFBcUY7SUFDekcsUUFBUSxFQUFZLGdEQUFnRDtJQUNwRSxnQkFBZ0IsRUFBSSwyREFBMkQ7SUFDL0UsU0FBUyxFQUFXLHdFQUF3RTtJQUM1RixTQUFTLEVBQVcsdUVBQXVFO0lBQzNGLFFBQVEsRUFBWSx3QkFBd0I7SUFDNUMsUUFBUSxFQUFZLCtEQUErRDtJQUNuRixPQUFPLEVBQWEsd0JBQXdCO0lBQzVDLElBQUksRUFBZ0IsaUNBQWlDO0lBQ3JELEtBQUssRUFBZSxvREFBb0Q7SUFDeEUsU0FBUyxFQUFXLDZDQUE2QztJQUNqRSxpQkFBaUIsRUFBRyxpRkFBaUY7SUFDckcsR0FBRyxFQUFpQiwwRUFBMEU7Q0FDakcsQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9sb2NhbGl6YXRpb24vcnUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMYW5ndWFnZU1hbmFnZXIgfSBmcm9tIFwiLi9sYW5ndWFnZS1tYW5hZ2VyXCI7XHJcblxyXG5MYW5ndWFnZU1hbmFnZXIucmVnaXN0ZXJMYW5ndWFnZShcInJ1XCIsIHtcclxuICAgIGFyZ3VtZW50TnVsbDogICAgICAgXCLQl9C90LDRh9C10L3QuNC1INC90LUg0LzQvtC20LXRgiDQsdGL0YLRjCDQvdC10L7Qv9GA0LXQtNC10LvQtdC90L3Ri9C8LiDQmNC80Y8g0L/QsNGA0LDQvNC10YLRgNCwOiB7cGFyYW1ldGVyTmFtZX0uXCIsXHJcbiAgICBjcmVkaXRDYXJkOiAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INC90LUg0YHQvtC00LXRgNC20LjRgiDQtNC+0L/Rg9GB0YLQuNC80YvQuSDQvdC+0LzQtdGAINC60YDQtdC00LjRgtC90L7QuSDQutCw0YDRgtGLLlwiLFxyXG4gICAgZW1haWw6ICAgICAgICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQvdC1INGB0L7QtNC10YDQttC40YIg0LTQvtC/0YPRgdGC0LjQvNGL0Lkg0LDQtNGA0LXRgSDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0YsuXCIsXHJcbiAgICBlbXB0eTogICAgICAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0LwuXCIsXHJcbiAgICBlcXVhbDogICAgICAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INC00L7Qu9C20L3QviDRgdC+0LTQtdGA0LbQsNGC0Ywg0LfQvdCw0YfQtdC90LjQtSAne2NvbXBhcmlzb25WYWx1ZX0nLlwiLFxyXG4gICAgZXhhY3RMZW5ndGg6ICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQtNC+0LvQttC90L4g0YHQvtC00LXRgNC20LDRgtGMINGB0YLRgNC+0LrRgyDQtNC70LjQvdC+0Y4ge2V4YWN0TGVuZ3RofS5cIixcclxuICAgIGV4Y2x1c2l2ZUJldHdlZW46ICAgXCLQl9C90LDRh9C10L3QuNC1INC/0L7Qu9GPIHtuYW1lfSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0LIg0L/RgNC10LTQtdC70LDRhSDQvtGCIHttaW59INC00L4ge21heH0uXCIsXHJcbiAgICBncmVhdGVyVGhhbjogICAgICAgIFwi0JfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyB7bmFtZX0g0LTQvtC70LbQvdC+INCx0YvRgtGMINCx0L7Qu9GM0YjQtSB7bWlufS5cIixcclxuICAgIGdyZWF0ZXJUaGFuT3JFcXVhbDogXCLQl9C90LDRh9C10L3QuNC1INC/0L7Qu9GPIHtuYW1lfSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0LHQvtC70YzRiNC1INC70LjQsdC+INGA0LDQstC90L4ge21pbn0uXCIsXHJcbiAgICBpbmNsdXNpdmVCZXR3ZWVuOiAgIFwi0JfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyB7bmFtZX0g0LTQvtC70LbQvdC+INCx0YvRgtGMINCyINC/0YDQtdC00LXQu9Cw0YUg0L7RgiB7bWlufSDQtNC+IHttYXh9INCy0LrQu9GO0YfQuNGC0LXQu9GM0L3Qvi5cIixcclxuICAgIGludmFsaWRGaWVsZDogICAgICAgXCLQn9C+0LvQtSB7bmFtZX0g0YHQvtC00LXRgNC20LjRgiDQvdC10LTQvtC/0YPRgdGC0LjQvNC+0LUg0LfQvdCw0YfQtdC90LjQtS5cIixcclxuICAgIGludmFsaWRGaWVsZFR5cGU6ICAgXCLQotC40L8g0LTQsNC90L3Ri9GFINC/0L7Qu9GPIHtuYW1lfSDQtNC+0LvQttC10L0g0LHRi9GC0YwgJ3tleHBlY3RlZFR5cGV9Jy4g0J7QsdC90LDRgNGD0LbQtdC90L4g0LfQvdCw0YfQtdC90LjQtTogJ3t0eXBlfScuXCIsIFxyXG4gICAgbGVzc1RoYW46ICAgICAgICAgICBcItCX0L3QsNGH0LXQvdC40LUg0L/QvtC70Y8ge25hbWV9INC00L7Qu9C20L3QviDQsdGL0YLRjCDQvNC10L3RjNGI0LUge21heH0uXCIsXHJcbiAgICBsZXNzVGhhbk9yRXF1YWxzOiAgIFwi0JfQvdCw0YfQtdC90LjQtSDQv9C+0LvRjyB7bmFtZX0g0LTQvtC70LbQvdC+INCx0YvRgtGMINC80LXQvdGM0YjQtSDQu9C40LHQviDRgNCw0LLQvdC+IHttYXh9LlwiLFxyXG4gICAgbWF4TGVuZ3RoOiAgICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQtNC+0LvQttC90L4g0YHQvtC00LXRgNC20LDRgtGMINGB0YLRgNC+0LrRgyDRgSDQvNCw0LrRgdC40LzQsNC70YzQvdC+0Lkg0LTQu9C40L3QvtC5IHttYXhMZW5ndGh9LlwiLFxyXG4gICAgbWluTGVuZ3RoOiAgICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQtNC+0LvQttC90L4g0YHQvtC00LXRgNC20LDRgtGMINGB0YLRgNC+0LrRgyDRgSDQvNC40L3QuNC80LDQu9GM0L3QvtC5INC00LvQuNC90L7QuSB7bWluTGVuZ3RofS5cIixcclxuICAgIG5vdEVtcHR5OiAgICAgICAgICAgXCLQotGA0LXQsdGD0LXRgtGB0Y8g0L/QvtC70LUge25hbWV9LlwiLFxyXG4gICAgbm90RXF1YWw6ICAgICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQvdC1INC00L7Qu9C20L3QviDRgdC+0LTQtdGA0LbQsNGC0Ywg0LfQvdCw0YfQtdC90LjQtSAne2NvbXBhcmlzb25WYWx1ZX0nLlwiLFxyXG4gICAgbm90TnVsbDogICAgICAgICAgICBcItCi0YDQtdCx0YPQtdGC0YHRjyDQv9C+0LvQtSB7bmFtZX0uXCIsXHJcbiAgICBudWxsOiAgICAgICAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0LwuXCIsXHJcbiAgICBwaG9uZTogICAgICAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INC90LUg0YHQvtC00LXRgNC20LjRgiDQtNC+0L/Rg9GB0YLQuNC80YvQuSDQvdC+0LzQtdGAINGC0LXQu9C10YTQvtC90LAuXCIsXHJcbiAgICBwcmVkaWNhdGU6ICAgICAgICAgIFwi0J/QvtC70LUge25hbWV9INGB0L7QtNC10YDQttC40YIg0L3QtdC00L7Qv9GD0YHRgtC40LzQvtC1INC30L3QsNGH0LXQvdC40LUuXCIsXHJcbiAgICByZWd1bGFyRXhwcmVzc2lvbjogIFwi0J/QvtC70LUge25hbWV9INC00L7Qu9C20L3QviDRgdC+0L7RgtCy0LXRgtGB0YLQstC+0LLQsNGC0Ywg0YDQtdCz0YPQu9GP0YDQvdC+0LzRgyDQstGL0YDQsNC20LXQvdC40Y4gJ3tyZWd1bGFyRXhwcmVzc2lvbn0nLlwiLFxyXG4gICAgdXJpOiAgICAgICAgICAgICAgICBcItCf0L7Qu9C1IHtuYW1lfSDQvdC1INGB0L7QtNC10YDQttC40YIg0LTQvtC/0YPRgdGC0LjQvNGL0Lkg0L/QvtC70L3Ri9C5IFVSTC3QsNC00YDQtdGBIGh0dHAsIGh0dHBzINC40LvQuCBmdHAuXCJcclxufSk7Il19

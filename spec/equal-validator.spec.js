"use strict";
var equal_validator_1 = require("../src/validators/equal.validator");
var property_validator_tester_1 = require("./property-validator-tester");
var description = "Equal validator spec.";
var tester = new property_validator_tester_1.PropertyValidatorTester(new equal_validator_1.EqualValidator(null));
tester.test(description, [
    { value: null, pass: true },
    { value: undefined, pass: false },
    { value: 0, pass: false }
]);
tester = new property_validator_tester_1.PropertyValidatorTester(new equal_validator_1.EqualValidator("test string"));
tester.test(description, [
    { value: "test string", pass: true },
    { value: "TEST STRING", pass: false },
    { value: "another string", pass: false },
    { value: 100, pass: false }
]);
tester = new property_validator_tester_1.PropertyValidatorTester(new equal_validator_1.EqualValidator(new Date(2020, 1, 0)));
tester.test(description, [
    { value: new Date(2020, 1, 0), pass: true },
    { value: new Date(2010, 1, 0), pass: false }
]);
tester = new property_validator_tester_1.PropertyValidatorTester(new equal_validator_1.EqualValidator(false));
tester.test(description, [
    { value: false, pass: true },
    { value: true, pass: false },
    { value: "false", pass: false }
]);
tester = new property_validator_tester_1.PropertyValidatorTester(new equal_validator_1.EqualValidator(1000));
tester.test(description, [
    { value: 1000, pass: true },
    { value: "1000", pass: false },
    { value: 500, pass: false },
    { value: -1000, pass: false }
]);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwZWMvZXF1YWwtdmFsaWRhdG9yLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdDQUErQixtQ0FBbUMsQ0FBQyxDQUFBO0FBQ25FLDBDQUFtRSw2QkFBNkIsQ0FBQyxDQUFBO0FBRWpHLElBQUksV0FBVyxHQUFHLHVCQUF1QixDQUFDO0FBRTFDLElBQUksTUFBTSxHQUFHLElBQUksbURBQXVCLENBQUMsSUFBSSxnQ0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkUsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7SUFDckIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7SUFDM0IsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7SUFDakMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7Q0FDNUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxHQUFHLElBQUksbURBQXVCLENBQUMsSUFBSSxnQ0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDeEUsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7SUFDckIsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7SUFDcEMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7SUFDckMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtJQUN4QyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtDQUM5QixDQUFDLENBQUM7QUFFSCxNQUFNLEdBQUcsSUFBSSxtREFBdUIsQ0FBQyxJQUFJLGdDQUFjLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7SUFDckIsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0lBQzNDLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtDQUMvQyxDQUFDLENBQUM7QUFFSCxNQUFNLEdBQUcsSUFBSSxtREFBdUIsQ0FBQyxJQUFJLGdDQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtJQUNyQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtJQUM1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtJQUM1QixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtDQUNsQyxDQUFDLENBQUM7QUFFSCxNQUFNLEdBQUcsSUFBSSxtREFBdUIsQ0FBQyxJQUFJLGdDQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtJQUNyQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtJQUMzQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtJQUM5QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtJQUMzQixFQUFFLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO0NBQ2hDLENBQUMsQ0FBQyIsImZpbGUiOiJzcGVjL2VxdWFsLXZhbGlkYXRvci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXF1YWxWYWxpZGF0b3IgfSBmcm9tIFwiLi4vc3JjL3ZhbGlkYXRvcnMvZXF1YWwudmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IFByb3BlcnR5VmFsaWRhdG9yVGVzdGVyLCBQcm9wZXJ0eVZhbGlkYXRvclRlc3RDYXNlIH0gZnJvbSBcIi4vcHJvcGVydHktdmFsaWRhdG9yLXRlc3RlclwiO1xyXG5cclxudmFyIGRlc2NyaXB0aW9uID0gXCJFcXVhbCB2YWxpZGF0b3Igc3BlYy5cIjtcclxuXHJcbnZhciB0ZXN0ZXIgPSBuZXcgUHJvcGVydHlWYWxpZGF0b3JUZXN0ZXIobmV3IEVxdWFsVmFsaWRhdG9yKG51bGwpKTtcclxudGVzdGVyLnRlc3QoZGVzY3JpcHRpb24sIFtcclxuICAgIHsgdmFsdWU6IG51bGwsIHBhc3M6IHRydWUgfSxcclxuICAgIHsgdmFsdWU6IHVuZGVmaW5lZCwgcGFzczogZmFsc2UgfSxcclxuICAgIHsgdmFsdWU6IDAsIHBhc3M6IGZhbHNlIH1cclxuXSk7XHJcblxyXG50ZXN0ZXIgPSBuZXcgUHJvcGVydHlWYWxpZGF0b3JUZXN0ZXIobmV3IEVxdWFsVmFsaWRhdG9yKFwidGVzdCBzdHJpbmdcIikpO1xyXG50ZXN0ZXIudGVzdChkZXNjcmlwdGlvbiwgW1xyXG4gICAgeyB2YWx1ZTogXCJ0ZXN0IHN0cmluZ1wiLCBwYXNzOiB0cnVlIH0sXHJcbiAgICB7IHZhbHVlOiBcIlRFU1QgU1RSSU5HXCIsIHBhc3M6IGZhbHNlIH0sXHJcbiAgICB7IHZhbHVlOiBcImFub3RoZXIgc3RyaW5nXCIsIHBhc3M6IGZhbHNlIH0sXHJcbiAgICB7IHZhbHVlOiAxMDAsIHBhc3M6IGZhbHNlIH1cclxuXSk7XHJcblxyXG50ZXN0ZXIgPSBuZXcgUHJvcGVydHlWYWxpZGF0b3JUZXN0ZXIobmV3IEVxdWFsVmFsaWRhdG9yKG5ldyBEYXRlKDIwMjAsIDEsIDApKSk7XHJcbnRlc3Rlci50ZXN0KGRlc2NyaXB0aW9uLCBbXHJcbiAgICB7IHZhbHVlOiBuZXcgRGF0ZSgyMDIwLCAxLCAwKSwgcGFzczogdHJ1ZSB9LFxyXG4gICAgeyB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMSwgMCksIHBhc3M6IGZhbHNlIH1cclxuXSk7XHJcblxyXG50ZXN0ZXIgPSBuZXcgUHJvcGVydHlWYWxpZGF0b3JUZXN0ZXIobmV3IEVxdWFsVmFsaWRhdG9yKGZhbHNlKSk7XHJcbnRlc3Rlci50ZXN0KGRlc2NyaXB0aW9uLCBbXHJcbiAgICB7IHZhbHVlOiBmYWxzZSwgcGFzczogdHJ1ZSB9LFxyXG4gICAgeyB2YWx1ZTogdHJ1ZSwgcGFzczogZmFsc2UgfSxcclxuICAgIHsgdmFsdWU6IFwiZmFsc2VcIiwgcGFzczogZmFsc2UgfVxyXG5dKTtcclxuXHJcbnRlc3RlciA9IG5ldyBQcm9wZXJ0eVZhbGlkYXRvclRlc3RlcihuZXcgRXF1YWxWYWxpZGF0b3IoMTAwMCkpO1xyXG50ZXN0ZXIudGVzdChkZXNjcmlwdGlvbiwgW1xyXG4gICAgeyB2YWx1ZTogMTAwMCwgcGFzczogdHJ1ZSB9LFxyXG4gICAgeyB2YWx1ZTogXCIxMDAwXCIsIHBhc3M6IGZhbHNlIH0sXHJcbiAgICB7IHZhbHVlOiA1MDAsIHBhc3M6IGZhbHNlIH0sXHJcbiAgICB7IHZhbHVlOiAtMTAwMCwgcGFzczogZmFsc2UgfVxyXG5dKTsiXX0=
